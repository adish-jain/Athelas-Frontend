{"ast":null,"code":"var _jsxFileName = \"/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/UploadImage.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./UploadImage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UploadImage(props) {\n  _s();\n\n  const [image, changeImage] = useState(\"\");\n  const [rotatedImage, changeRotatedImage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [\"Choose an Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"myFile\",\n        name: \"filename\",\n        accept: \"image/*\",\n        onChange: e => handleImageUpload(e, changeImage, setErrorMessage),\n        className: \"upload-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), errorMessage != \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-section\",\n      children: image != \"\" && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        style: {\n          maxWidth: \"50%\",\n          marginTop: \"20px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UploadImage, \"c/U5qt+zLnKiarQi6od+2cNCrYA=\");\n\n_c = UploadImage;\n\nfunction handleImageUpload(e, changeImage, setErrorMessage) {\n  let selectedImage = e.target.files[0];\n  const selectedImageURL = URL.createObjectURL(selectedImage);\n\n  if (selectedImage.size > 5000000) {\n    setErrorMessage(\"Image size is too big. Try again with an image size less than 5MB.\");\n  } else {\n    changeImage(selectedImageURL);\n    setErrorMessage(\"\");\n    saveImage(selectedImage, selectedImageURL, changeImage, setErrorMessage);\n  }\n}\n\nasync function saveImage(selectedImage, selectedImageURL, changeImage, setErrorMessage) {\n  const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n\n  let data = {\n    imageFile: await toBase64(selectedImage)\n  }; //   await fetch(\"/api/endpoint\", {\n  //     method: \"POST\",\n  //     headers: new Headers({\n  //       \"Content-Type\": \"application/json\",\n  //     }),\n  //     body: JSON.stringify(data),\n  //   })\n\n  console.log(selectedImage);\n  axios.post(`http://localhost:3001/uploadImage`, data) // axios({\n  //     method: 'post',\n  //     url: 'http://localhost:3001/uploadImage',\n  //     headers: {'Content-Type' : 'application/json'},\n  //     body: {\"a\": 1}\n  // })\n  .then(async res => {\n    let resJSON = await res.data;\n    console.log(res);\n    console.log(resJSON);\n\n    if (res.status === 200) {\n      changeImage(resJSON.rotatedImage);\n      setErrorMessage(\"Your image was successfully rotated!\");\n    } else {\n      setErrorMessage(\"\");\n    }\n  }).catch(error => {\n    console.log(error);\n    console.log(\"upload failed.\");\n    setErrorMessage(error);\n  });\n}\n\nexport default UploadImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"names":["axios","useState","UploadImage","props","image","changeImage","rotatedImage","changeRotatedImage","errorMessage","setErrorMessage","e","handleImageUpload","maxWidth","marginTop","selectedImage","target","files","selectedImageURL","URL","createObjectURL","size","saveImage","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","data","imageFile","console","log","post","then","res","resJSON","status","catch"],"sources":["/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/UploadImage.js"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./UploadImage.css\";\n\nfunction UploadImage(props) {\n  const [image, changeImage] = useState(\"\");\n  const [rotatedImage, changeRotatedImage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  return (\n    <div className={\"container\"}>\n      <div className={\"input-container\"}>\n        Choose an Image\n        <input\n          type=\"file\"\n          id=\"myFile\"\n          name=\"filename\"\n          accept=\"image/*\"\n          onChange={(e) =>\n            handleImageUpload(\n              e,\n              changeImage,\n              setErrorMessage\n            )\n          }\n          className={\"upload-button\"}\n        />\n      </div>\n\n      {errorMessage != \"\" && <p>{errorMessage}</p>}\n      <div className={\"image-section\"}>\n        {/* {originalImage != \"\" && (\n          <img\n            src={originalImage}\n            style={{ width: \"50%\", maxWidth: \"500px\", marginTop: \"20px\" }}\n          />\n        )} */}\n        {image != \"\" && (\n          <img\n            src={image}\n            style={{ maxWidth: \"50%\", marginTop: \"20px\" }}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction handleImageUpload(\n  e,\n  changeImage,\n  setErrorMessage\n) {\n  let selectedImage = e.target.files[0];\n  const selectedImageURL = URL.createObjectURL(selectedImage);\n  if (selectedImage.size > 5000000) {\n    setErrorMessage(\n      \"Image size is too big. Try again with an image size less than 5MB.\"\n    );\n  } else {\n    changeImage(selectedImageURL);\n    setErrorMessage(\"\");\n    saveImage(\n      selectedImage,\n      selectedImageURL,\n      changeImage,\n      setErrorMessage\n    );\n  }\n}\n\nasync function saveImage(\n  selectedImage,\n  selectedImageURL,\n  changeImage,\n  setErrorMessage\n) {\n  const toBase64 = (file) =>\n    new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = (error) => reject(error);\n    });\n\n  let data = {\n    imageFile: await toBase64(selectedImage),\n  };\n\n  //   await fetch(\"/api/endpoint\", {\n  //     method: \"POST\",\n  //     headers: new Headers({\n  //       \"Content-Type\": \"application/json\",\n  //     }),\n  //     body: JSON.stringify(data),\n  //   })\n  console.log(selectedImage);\n  axios\n    .post(`http://localhost:3001/uploadImage`, data)\n    // axios({\n    //     method: 'post',\n    //     url: 'http://localhost:3001/uploadImage',\n    //     headers: {'Content-Type' : 'application/json'},\n    //     body: {\"a\": 1}\n    // })\n    .then(async (res) => {\n      let resJSON = await res.data;\n      console.log(res);\n      console.log(resJSON);\n      if (res.status === 200) {\n        changeImage(resJSON.rotatedImage);\n        setErrorMessage(\"Your image was successfully rotated!\");\n      } else {\n        setErrorMessage(\"\");\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n      console.log(\"upload failed.\");\n      setErrorMessage(error);\n    });\n}\n\nexport default UploadImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}