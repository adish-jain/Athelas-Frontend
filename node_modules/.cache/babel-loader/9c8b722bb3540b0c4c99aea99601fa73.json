{"ast":null,"code":"var _jsxFileName = \"/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/UploadImage.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./UploadImage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UploadImage(props) {\n  _s();\n\n  const [image, changeImage] = useState(\"\"); // image that is displayed\n\n  const [selectedImage, setSelectedImage] = useState({}); //   const [rotatedImage, changeRotatedImage] = useState(\"\");\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [numDegrees, setNumDegrees] = useState(90);\n  const [showInput, setShowInput] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [\"Choose an Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"myFile\",\n        name: \"filename\",\n        accept: \"image/*\",\n        onChange: e => handleImageUpload(e, changeImage, setErrorMessage, setSelectedImage),\n        className: \"upload-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), errorMessage != \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-section\",\n      children: image != \"\" && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        style: {\n          maxWidth: \"50%\",\n          marginTop: \"20px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), !showInput && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-section\",\n      children: [image != \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        onClick: () => setShowInput(!showInput),\n        children: \"Rotate Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), image != \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: \"Surprise me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), showInput && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rotate-degrees\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"How much do you want to rotate the image by?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        pattern: \"[0-9]*\",\n        onChange: e => setNumDegrees(e.target.value.replace(/\\D/, \"\")),\n        value: numDegrees,\n        style: {\n          marginTop: \"20px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        onClick: e => {\n          handleRotate(e, numDegrees, setShowInput, selectedImage, changeImage, setErrorMessage, setSelectedImage);\n        },\n        children: \"Rotate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UploadImage, \"lOC7d4Co1a8ZyBkzvnupxrxFmIo=\");\n\n_c = UploadImage;\n\nfunction handleRotate(e, numDegrees, setShowInput, selectedImage, changeImage, setErrorMessage, setSelectedImage) {\n  setShowInput(false);\n  saveImage(numDegrees, selectedImage, changeImage, setErrorMessage, setSelectedImage);\n}\n\nfunction handleImageUpload(e, changeImage, setErrorMessage, setSelectedImage) {\n  let selectedImage = e.target.files[0];\n  const selectedImageURL = URL.createObjectURL(selectedImage);\n\n  if (selectedImage.size > 5000000) {\n    setErrorMessage(\"Image size is too big. Try again with an image size less than 5MB.\");\n  } else {\n    changeImage(selectedImageURL);\n    setSelectedImage(selectedImage);\n    setErrorMessage(\"\"); // saveImage(\n    //   selectedImage,\n    //   selectedImageURL,\n    //   changeImage,\n    //   setErrorMessage\n    // );\n  }\n}\n\nasync function saveImage(numDegrees, selectedImage, //   selectedImageURL,\nchangeImage, setErrorMessage, setSelectedImage) {\n  const toBase64 = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n\n  let data = {\n    imageFile: await toBase64(selectedImage),\n    numDegrees: numDegrees\n  }; //   await fetch(\"/api/endpoint\", {\n  //     method: \"POST\",\n  //     headers: new Headers({\n  //       \"Content-Type\": \"application/json\",\n  //     }),\n  //     body: JSON.stringify(data),\n  //   })\n\n  console.log(selectedImage);\n  axios.post(`http://localhost:3001/uploadImage`, data) // axios({\n  //     method: 'post',\n  //     url: 'http://localhost:3001/uploadImage',\n  //     headers: {'Content-Type' : 'application/json'},\n  //     body: {\"a\": 1}\n  // })\n  .then(async res => {\n    let resJSON = await res.data;\n    console.log(res);\n    console.log(resJSON);\n\n    if (res.status === 200) {\n      changeImage(resJSON.rotatedImage);\n      setSelectedImage(resJSON.rotatedImage);\n      setErrorMessage(\"Your image was successfully rotated!\");\n    } else {\n      setErrorMessage(\"\");\n    }\n  }).catch(error => {\n    console.log(error);\n    console.log(\"upload failed.\");\n    setErrorMessage(error);\n  });\n}\n\nexport default UploadImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"names":["axios","useState","UploadImage","props","image","changeImage","selectedImage","setSelectedImage","errorMessage","setErrorMessage","numDegrees","setNumDegrees","showInput","setShowInput","e","handleImageUpload","maxWidth","marginTop","target","value","replace","handleRotate","saveImage","files","selectedImageURL","URL","createObjectURL","size","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","data","imageFile","console","log","post","then","res","resJSON","status","rotatedImage","catch"],"sources":["/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/UploadImage.js"],"sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./UploadImage.css\";\n\nfunction UploadImage(props) {\n  const [image, changeImage] = useState(\"\"); // image that is displayed\n  const [selectedImage, setSelectedImage] = useState({})\n//   const [rotatedImage, changeRotatedImage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [numDegrees, setNumDegrees] = useState(90);\n  const [showInput, setShowInput] = useState(false);\n  return (\n    <div className={\"container\"}>\n      <div className={\"input-container\"}>\n        Choose an Image\n        <input\n          type=\"file\"\n          id=\"myFile\"\n          name=\"filename\"\n          accept=\"image/*\"\n          onChange={(e) => handleImageUpload(e, changeImage, setErrorMessage, setSelectedImage)}\n          className={\"upload-button\"}\n        />\n      </div>\n\n      {errorMessage != \"\" && <p>{errorMessage}</p>}\n      <div className={\"image-section\"}>\n        {image != \"\" && (\n          <img src={image} style={{ maxWidth: \"50%\", marginTop: \"20px\" }} />\n        )}\n      </div>\n      {!showInput && (\n        <div className={\"button-section\"}>\n          {image != \"\" && (\n            <div\n              className={\"input-container\"}\n              onClick={() => setShowInput(!showInput)}\n            >\n              Rotate Image\n            </div>\n          )}\n          {image != \"\" && <div className={\"input-container\"}>Surprise me</div>}\n        </div>\n      )}\n      {showInput && (\n        <div className={\"rotate-degrees\"}>\n          <div>How much do you want to rotate the image by?</div>\n          <input\n            type=\"text\"\n            pattern=\"[0-9]*\"\n            onChange={(e) => setNumDegrees(e.target.value.replace(/\\D/, \"\"))}\n            value={numDegrees}\n            style={{ marginTop: \"20px\" }}\n          />\n          <div\n            className={\"input-container\"}\n            onClick={(e) => {\n              handleRotate(\n                e,\n                numDegrees,\n                setShowInput,\n                selectedImage,\n                changeImage,\n                setErrorMessage,\n                setSelectedImage\n              );\n            }}\n          >\n            Rotate\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction handleRotate(\n  e,\n  numDegrees,\n  setShowInput,\n  selectedImage,\n  changeImage,\n  setErrorMessage,\n  setSelectedImage,\n) {\n  setShowInput(false);\n  saveImage(numDegrees, selectedImage, changeImage, setErrorMessage, setSelectedImage);\n}\n\nfunction handleImageUpload(e, changeImage, setErrorMessage, setSelectedImage) {\n  let selectedImage = e.target.files[0];\n  const selectedImageURL = URL.createObjectURL(selectedImage);\n  if (selectedImage.size > 5000000) {\n    setErrorMessage(\n      \"Image size is too big. Try again with an image size less than 5MB.\"\n    );\n  } else {\n    changeImage(selectedImageURL);\n    setSelectedImage(selectedImage)\n    setErrorMessage(\"\");\n    // saveImage(\n    //   selectedImage,\n    //   selectedImageURL,\n    //   changeImage,\n    //   setErrorMessage\n    // );\n  }\n}\n\nasync function saveImage(\n  numDegrees,\n  selectedImage,\n  //   selectedImageURL,\n  changeImage,\n  setErrorMessage,\n  setSelectedImage\n) {\n  const toBase64 = (file) =>\n    new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = (error) => reject(error);\n    });\n\n  let data = {\n    imageFile: await toBase64(selectedImage),\n    numDegrees: numDegrees,\n  };\n\n  //   await fetch(\"/api/endpoint\", {\n  //     method: \"POST\",\n  //     headers: new Headers({\n  //       \"Content-Type\": \"application/json\",\n  //     }),\n  //     body: JSON.stringify(data),\n  //   })\n  console.log(selectedImage);\n  axios\n    .post(`http://localhost:3001/uploadImage`, data)\n    // axios({\n    //     method: 'post',\n    //     url: 'http://localhost:3001/uploadImage',\n    //     headers: {'Content-Type' : 'application/json'},\n    //     body: {\"a\": 1}\n    // })\n    .then(async (res) => {\n      let resJSON = await res.data;\n      console.log(res);\n      console.log(resJSON);\n      if (res.status === 200) {\n        changeImage(resJSON.rotatedImage);\n        setSelectedImage(resJSON.rotatedImage)\n        setErrorMessage(\"Your image was successfully rotated!\");\n      } else {\n        setErrorMessage(\"\");\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n      console.log(\"upload failed.\");\n      setErrorMessage(error);\n    });\n}\n\nexport default UploadImage;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,mBAAP;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;EAAA;;EAC1B,MAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBJ,QAAQ,CAAC,EAAD,CAArC,CAD0B,CACiB;;EAC3C,MAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD,CAF0B,CAG5B;;EACE,MAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;EACA,oBACE;IAAK,SAAS,EAAE,WAAhB;IAAA,wBACE;MAAK,SAAS,EAAE,iBAAhB;MAAA,2CAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,QAFL;QAGE,IAAI,EAAC,UAHP;QAIE,MAAM,EAAC,SAJT;QAKE,QAAQ,EAAGa,CAAD,IAAOC,iBAAiB,CAACD,CAAD,EAAIT,WAAJ,EAAiBI,eAAjB,EAAkCF,gBAAlC,CALpC;QAME,SAAS,EAAE;MANb;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAaGC,YAAY,IAAI,EAAhB,iBAAsB;MAAA,UAAIA;IAAJ;MAAA;MAAA;MAAA;IAAA,QAbzB,eAcE;MAAK,SAAS,EAAE,eAAhB;MAAA,UACGJ,KAAK,IAAI,EAAT,iBACC;QAAK,GAAG,EAAEA,KAAV;QAAiB,KAAK,EAAE;UAAEY,QAAQ,EAAE,KAAZ;UAAmBC,SAAS,EAAE;QAA9B;MAAxB;QAAA;QAAA;QAAA;MAAA;IAFJ;MAAA;MAAA;MAAA;IAAA,QAdF,EAmBG,CAACL,SAAD,iBACC;MAAK,SAAS,EAAE,gBAAhB;MAAA,WACGR,KAAK,IAAI,EAAT,iBACC;QACE,SAAS,EAAE,iBADb;QAEE,OAAO,EAAE,MAAMS,YAAY,CAAC,CAACD,SAAF,CAF7B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ,EASGR,KAAK,IAAI,EAAT,iBAAe;QAAK,SAAS,EAAE,iBAAhB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATlB;IAAA;MAAA;MAAA;MAAA;IAAA,QApBJ,EAgCGQ,SAAS,iBACR;MAAK,SAAS,EAAE,gBAAhB;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,OAAO,EAAC,QAFV;QAGE,QAAQ,EAAGE,CAAD,IAAOH,aAAa,CAACG,CAAC,CAACI,MAAF,CAASC,KAAT,CAAeC,OAAf,CAAuB,IAAvB,EAA6B,EAA7B,CAAD,CAHhC;QAIE,KAAK,EAAEV,UAJT;QAKE,KAAK,EAAE;UAAEO,SAAS,EAAE;QAAb;MALT;QAAA;QAAA;QAAA;MAAA,QAFF,eASE;QACE,SAAS,EAAE,iBADb;QAEE,OAAO,EAAGH,CAAD,IAAO;UACdO,YAAY,CACVP,CADU,EAEVJ,UAFU,EAGVG,YAHU,EAIVP,aAJU,EAKVD,WALU,EAMVI,eANU,EAOVF,gBAPU,CAAZ;QASD,CAZH;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA,QAjCJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA+DD;;GAtEQL,W;;KAAAA,W;;AAwET,SAASmB,YAAT,CACEP,CADF,EAEEJ,UAFF,EAGEG,YAHF,EAIEP,aAJF,EAKED,WALF,EAMEI,eANF,EAOEF,gBAPF,EAQE;EACAM,YAAY,CAAC,KAAD,CAAZ;EACAS,SAAS,CAACZ,UAAD,EAAaJ,aAAb,EAA4BD,WAA5B,EAAyCI,eAAzC,EAA0DF,gBAA1D,CAAT;AACD;;AAED,SAASQ,iBAAT,CAA2BD,CAA3B,EAA8BT,WAA9B,EAA2CI,eAA3C,EAA4DF,gBAA5D,EAA8E;EAC5E,IAAID,aAAa,GAAGQ,CAAC,CAACI,MAAF,CAASK,KAAT,CAAe,CAAf,CAApB;EACA,MAAMC,gBAAgB,GAAGC,GAAG,CAACC,eAAJ,CAAoBpB,aAApB,CAAzB;;EACA,IAAIA,aAAa,CAACqB,IAAd,GAAqB,OAAzB,EAAkC;IAChClB,eAAe,CACb,oEADa,CAAf;EAGD,CAJD,MAIO;IACLJ,WAAW,CAACmB,gBAAD,CAAX;IACAjB,gBAAgB,CAACD,aAAD,CAAhB;IACAG,eAAe,CAAC,EAAD,CAAf,CAHK,CAIL;IACA;IACA;IACA;IACA;IACA;EACD;AACF;;AAED,eAAea,SAAf,CACEZ,UADF,EAEEJ,aAFF,EAGE;AACAD,WAJF,EAKEI,eALF,EAMEF,gBANF,EAOE;EACA,MAAMqB,QAAQ,GAAIC,IAAD,IACf,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IAC/B,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACAD,MAAM,CAACE,aAAP,CAAqBN,IAArB;;IACAI,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;IACAJ,MAAM,CAACK,OAAP,GAAkBC,KAAD,IAAWP,MAAM,CAACO,KAAD,CAAlC;EACD,CALD,CADF;;EAQA,IAAIC,IAAI,GAAG;IACTC,SAAS,EAAE,MAAMb,QAAQ,CAACtB,aAAD,CADhB;IAETI,UAAU,EAAEA;EAFH,CAAX,CATA,CAcA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAgC,OAAO,CAACC,GAAR,CAAYrC,aAAZ;EACAN,KAAK,CACF4C,IADH,CACS,mCADT,EAC6CJ,IAD7C,EAEE;EACA;EACA;EACA;EACA;EACA;EAPF,CAQGK,IARH,CAQQ,MAAOC,GAAP,IAAe;IACnB,IAAIC,OAAO,GAAG,MAAMD,GAAG,CAACN,IAAxB;IACAE,OAAO,CAACC,GAAR,CAAYG,GAAZ;IACAJ,OAAO,CAACC,GAAR,CAAYI,OAAZ;;IACA,IAAID,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;MACtB3C,WAAW,CAAC0C,OAAO,CAACE,YAAT,CAAX;MACA1C,gBAAgB,CAACwC,OAAO,CAACE,YAAT,CAAhB;MACAxC,eAAe,CAAC,sCAAD,CAAf;IACD,CAJD,MAIO;MACLA,eAAe,CAAC,EAAD,CAAf;IACD;EACF,CAnBH,EAoBGyC,KApBH,CAoBUX,KAAD,IAAW;IAChBG,OAAO,CAACC,GAAR,CAAYJ,KAAZ;IACAG,OAAO,CAACC,GAAR,CAAY,gBAAZ;IACAlC,eAAe,CAAC8B,KAAD,CAAf;EACD,CAxBH;AAyBD;;AAED,eAAerC,WAAf"},"metadata":{},"sourceType":"module"}