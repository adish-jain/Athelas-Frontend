[{"/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/index.js":"1","/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/App.js":"2","/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/UploadImage.js":"3"},{"size":254,"mtime":1665259564243,"results":"4","hashOfConfig":"5"},{"size":322,"mtime":1665259982813,"results":"6","hashOfConfig":"5"},{"size":5473,"mtime":1665434444058,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"17fbdwl",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"11"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/index.js",[],[],[],"/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/App.js",["20","21"],[],"import logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\nimport UploadImage from './UploadImage'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <p>Athelas Coding Test</p>\n       <UploadImage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/adish/Desktop/Athelas-Coding-Test/Frontend/src/UploadImage.js",["22","23","24","25","26","27"],[],"import axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./UploadImage.css\";\n\nfunction UploadImage() {\n  const [image, changeImage] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [numDegrees, setNumDegrees] = useState(90);\n  const [showInput, setShowInput] = useState(false);\n  const [loading, setLoading] = useState(false);\n  return (\n    <div className={\"container\"}>\n      <div className={\"input-container\"}>\n        Choose an Image\n        <input\n          type=\"file\"\n          id=\"myFile\"\n          name=\"filename\"\n          accept=\"image/*\"\n          onChange={(e) =>\n            handleImageUpload(e, changeImage, setMessage, setSelectedImage)\n          }\n          className={\"upload-button\"}\n        />\n      </div>\n\n      {!loading && message != \"\" && <p>{message}</p>}\n      {loading && <p>{\"Loading...\"}</p>}\n      <div className={\"image-section\"}>\n        {image != \"\" && (\n          <img\n            src={image}\n            style={{ width: \"50vw\", maxWidth: \"50%\", marginTop: \"20px\" }}\n          />\n        )}\n      </div>\n      {!showInput && (\n        <div className={\"button-section\"}>\n          {image != \"\" && (\n            <div\n              className={\"input-container\"}\n              onClick={() => setShowInput(!showInput)}\n            >\n              Rotate\n            </div>\n          )}\n          {image != \"\" && (\n            <div\n              className={\"input-container\"}\n              onClick={() =>\n                handleAction(\n                  \"invert\",\n                  numDegrees,\n                  setShowInput,\n                  selectedImage,\n                  changeImage,\n                  setMessage,\n                  setSelectedImage,\n                  setLoading\n                )\n              }\n            >\n              Invert\n            </div>\n          )}\n          {image != \"\" && (\n            <div\n              className={\"input-container\"}\n              onClick={() =>\n                handleAction(\n                  \"greyscale\",\n                  numDegrees,\n                  setShowInput,\n                  selectedImage,\n                  changeImage,\n                  setMessage,\n                  setSelectedImage,\n                  setLoading\n                )\n              }\n            >\n              Greyscale\n            </div>\n          )}\n        </div>\n      )}\n      {showInput && (\n        <div className={\"rotate-degrees\"}>\n          <div>How much do you want to rotate the image by?</div>\n          <input\n            type=\"text\"\n            pattern=\"[0-9]*\"\n            onChange={(e) => setNumDegrees(e.target.value.replace(/\\D/, \"\"))}\n            value={numDegrees}\n            style={{ marginTop: \"20px\" }}\n            className={\"input-degrees\"}\n          />\n          <div\n            className={\"input-container\"}\n            onClick={() => {\n              handleAction(\n                \"rotate\",\n                numDegrees,\n                setShowInput,\n                selectedImage,\n                changeImage,\n                setMessage,\n                setSelectedImage,\n                setLoading\n              );\n            }}\n          >\n            Rotate\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction handleAction(\n  action,\n  numDegrees,\n  setShowInput,\n  selectedImage,\n  changeImage,\n  setMessage,\n  setSelectedImage,\n  setLoading\n) {\n  if (action === \"rotate\") {\n    setShowInput(false);\n    let data = {\n      imageFile: selectedImage,\n      numDegrees: numDegrees,\n    };\n    saveImage(\n      data,\n      action,\n      changeImage,\n      setMessage,\n      setSelectedImage,\n      setLoading\n    );\n  } else {\n    let data = {\n      imageFile: selectedImage,\n    };\n    saveImage(\n      data,\n      action,\n      changeImage,\n      setMessage,\n      setSelectedImage,\n      setLoading\n    );\n  }\n}\n\nconst toBase64 = (file) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = (error) => reject(error);\n  });\n\nasync function handleImageUpload(\n  e,\n  changeImage,\n  setMessage,\n  setSelectedImage\n) {\n  let selectedImage = e.target.files[0];\n  const selectedImageURL = URL.createObjectURL(selectedImage);\n  if (selectedImage.size > 5000000) {\n    setMessage(\n      \"Image size is too big. Try again with an image size less than 5MB.\"\n    );\n  } else {\n    selectedImage = await toBase64(selectedImage);\n    changeImage(selectedImageURL);\n    setSelectedImage(selectedImage);\n    setMessage(\"\");\n  }\n}\n\nasync function saveImage(\n  data,\n  endpoint,\n  changeImage,\n  setMessage,\n  setSelectedImage,\n  setLoading\n) {\n  setLoading(true);\n  const endpointToMessage = {\n    rotate: \"rotated\",\n    invert: \"inverted\",\n    greyscale: \"greyscaled\",\n  };\n  axios\n    .post(`http://localhost:3001/${endpoint}`, data)\n    .then(async (res) => {\n      let resJSON = await res.data;\n      if (res.status === 200) {\n        changeImage(resJSON.returnedImage);\n        setSelectedImage(resJSON.returnedImage);\n        setLoading(false);\n        setMessage(\n          `Your image was successfully ${endpointToMessage[endpoint]}!`\n        );\n      } else {\n        setMessage(\"\");\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n      setMessage(\"There was an error, please try again.\");\n    });\n}\n\nexport default UploadImage;\n",{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":12},{"ruleId":"28","severity":1,"message":"32","line":3,"column":8,"nodeType":"30","messageId":"31","endLine":3,"endColumn":13},{"ruleId":"33","severity":1,"message":"34","line":28,"column":28,"nodeType":"35","messageId":"36","endLine":28,"endColumn":30},{"ruleId":"33","severity":1,"message":"34","line":31,"column":16,"nodeType":"35","messageId":"36","endLine":31,"endColumn":18},{"ruleId":"37","severity":1,"message":"38","line":32,"column":11,"nodeType":"39","endLine":35,"endColumn":13},{"ruleId":"33","severity":1,"message":"34","line":40,"column":18,"nodeType":"35","messageId":"36","endLine":40,"endColumn":20},{"ruleId":"33","severity":1,"message":"34","line":48,"column":18,"nodeType":"35","messageId":"36","endLine":48,"endColumn":20},{"ruleId":"33","severity":1,"message":"34","line":67,"column":18,"nodeType":"35","messageId":"36","endLine":67,"endColumn":20},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]